Index: app/src/main/java/com/code_crusaders/floodsafe/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.code_crusaders.floodsafe\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.content.pm.PackageManager\r\nimport android.location.Location\r\nimport android.os.Bundle\r\nimport android.os.Looper\r\nimport android.widget.Toast\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Call\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.FmdBad\r\nimport androidx.compose.material.icons.filled.LocationOn\r\nimport androidx.compose.material.icons.filled.MyLocation\r\nimport androidx.compose.material3.BottomAppBar\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.core.content.ContextCompat\r\nimport com.code_crusaders.floodsafe.ui.theme.FloodsafeTheme\r\nimport com.google.android.gms.location.*\r\nimport com.mapbox.common.MapboxOptions\r\nimport com.mapbox.geojson.Point\r\nimport com.mapbox.maps.Style\r\nimport com.mapbox.maps.dsl.cameraOptions\r\nimport com.mapbox.maps.extension.compose.MapEffect\r\nimport com.mapbox.maps.extension.compose.MapboxMap\r\nimport com.mapbox.maps.extension.compose.animation.viewport.rememberMapViewportState\r\nimport com.mapbox.maps.extension.compose.annotation.generated.CircleAnnotation\r\nimport com.mapbox.maps.extension.compose.annotation.generated.PointAnnotationGroup\r\nimport com.mapbox.maps.extension.compose.style.MapStyle\r\nimport com.mapbox.maps.extension.style.expressions.generated.Expression\r\nimport com.mapbox.maps.plugin.animation.MapAnimationOptions\r\nimport com.mapbox.maps.plugin.annotation.AnnotationConfig\r\nimport com.mapbox.maps.plugin.annotation.AnnotationSourceOptions\r\nimport com.mapbox.maps.plugin.annotation.ClusterOptions\r\nimport com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions\r\n\r\nclass MainActivity : ComponentActivity() {\r\n    private lateinit var fusedLocationClient: FusedLocationProviderClient\r\n    private lateinit var locationCallback: LocationCallback\r\n    private var locationRequest: LocationRequest? = null\r\n\r\n    private val requestPermissionLauncher = registerForActivityResult(\r\n        ActivityResultContracts.RequestMultiplePermissions()\r\n    ) { permissions ->\r\n        when {\r\n            permissions.getOrDefault(Manifest.permission.ACCESS_FINE_LOCATION, false) -> {\r\n                // Precise location access granted.\r\n                getLastLocationOrStartLocationUpdates()\r\n            }\r\n\r\n            permissions.getOrDefault(Manifest.permission.ACCESS_COARSE_LOCATION, false) -> {\r\n                // Only approximate location access granted.\r\n                getLastLocationOrStartLocationUpdates()\r\n            }\r\n\r\n            else -> {\r\n                // No location access granted.\r\n                Toast.makeText(this, \"Location permission denied\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        MapboxOptions.accessToken =\r\n            \"pk.eyJ1IjoiaXRzaXZhZyIsImEiOiJjbGd5eWIyODIwZWI5M3Bwbm1rZjN0azM1In0.kCxW9Q7SksXt_BwV5QT5MQ\"\r\n\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\r\n\r\n        locationCallback = object : LocationCallback() {\r\n            override fun onLocationResult(locationResult: LocationResult) {\r\n                for (location in locationResult.locations) {\r\n                    updateLocationUI(location)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        enableEdgeToEdge()\r\n        setContent {\r\n        }\r\n\r\n        checkLocationPermission()\r\n    }\r\n\r\n    private fun checkLocationPermission() {\r\n        when {\r\n            ContextCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION\r\n            ) == PackageManager.PERMISSION_GRANTED -> {\r\n                getLastLocationOrStartLocationUpdates()\r\n            }\r\n\r\n            else -> {\r\n                requestPermissionLauncher.launch(\r\n                    arrayOf(\r\n                        Manifest.permission.ACCESS_FINE_LOCATION,\r\n                        Manifest.permission.ACCESS_COARSE_LOCATION\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    private fun getLastLocationOrStartLocationUpdates() {\r\n        fusedLocationClient.lastLocation\r\n            .addOnSuccessListener { location: Location? ->\r\n                if (location != null) {\r\n                    updateLocationUI(location)\r\n                } else {\r\n                    startLocationUpdates()\r\n                }\r\n            }\r\n            .addOnFailureListener { e ->\r\n                Toast.makeText(this, \"Error getting location: ${e.message}\", Toast.LENGTH_SHORT)\r\n                    .show()\r\n                startLocationUpdates()\r\n            }\r\n    }\r\n\r\n    private fun startLocationUpdates() {\r\n        locationRequest = LocationRequest.create().apply {\r\n            interval = 10000\r\n            fastestInterval = 5000\r\n            priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\n        }\r\n\r\n        if (ContextCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION\r\n            ) == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            fusedLocationClient.requestLocationUpdates(\r\n                locationRequest!!,\r\n                locationCallback,\r\n                Looper.getMainLooper()\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun updateLocationUI(location: Location) {\r\n        setContent {\r\n            FloodsafeTheme {\r\n                val mapViewportState = rememberMapViewportState {\r\n                    // Set the initial camera position\r\n                    setCameraOptions {\r\n                        center(Point.fromLngLat(0.0, 0.0))\r\n                        zoom(0.0)\r\n                        pitch(0.0)\r\n                    }\r\n                }\r\n                val userLocation by remember { mutableStateOf(location) }\r\n                val context = LocalContext.current\r\n\r\n                Scaffold(modifier = Modifier.fillMaxSize(), floatingActionButton = {\r\n                    FloatingActionButton(\r\n                        onClick = {\r\n                            mapViewportState.flyTo(\r\n                                cameraOptions = cameraOptions {\r\n                                    center(\r\n                                        Point.fromLngLat(\r\n                                            userLocation.longitude,\r\n                                            userLocation.latitude\r\n                                        )\r\n                                    )\r\n                                    zoom(14.0)\r\n                                    pitch(45.0)\r\n                                },\r\n                                MapAnimationOptions.mapAnimationOptions { duration(5000) }\r\n                            )\r\n                        }) {\r\n                        Icon(\r\n                            imageVector = Icons.Default.MyLocation,\r\n                            contentDescription = \"Current Location\"\r\n                        )\r\n                    }\r\n                },\r\n                    bottomBar = {\r\n                        BottomAppBar(\r\n                            actions = {\r\n                                IconButton(onClick = {\r\n\r\n                                }) {\r\n                                    Icon(\r\n                                        Icons.Filled.FmdBad,\r\n                                        contentDescription = \"Localized description\"\r\n                                    )\r\n                                }\r\n                                IconButton(onClick = { /* do something */ }) {\r\n                                    Icon(\r\n                                        Icons.Filled.Call,\r\n                                        contentDescription = \"Localized description\",\r\n                                    )\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                ) { innerPadding ->\r\n                    Column(\r\n                        Modifier\r\n                            .padding(innerPadding)\r\n                            .fillMaxSize()\r\n                    ) {\r\n                        MapboxMap(\r\n                            Modifier\r\n                                .weight(1f)\r\n                                .fillMaxSize(),\r\n                            mapViewportState = mapViewportState,\r\n                            style = {\r\n                                MapStyle(style = Style.SATELLITE_STREETS)\r\n                            }\r\n                        ) {\r\n//                            MapEffect(key1 = true) { mapView ->\r\n//\r\n//                            }\r\n                            // Add a single circle annotation at null island.\r\n                            CircleAnnotation(\r\n                                point = Point.fromLngLat(\r\n                                    userLocation.longitude,\r\n                                    userLocation.latitude\r\n                                ),\r\n                                onClick = {\r\n                                    Toast.makeText(\r\n                                        context,\r\n                                        \"Clicked on Circle Annotation: $it\",\r\n                                        Toast.LENGTH_SHORT\r\n                                    ).show()\r\n                                    true\r\n                                }\r\n                            ) {\r\n                                circleStrokeWidth = 2.0\r\n                                circleStrokeColor = Color(\r\n                                    red = 3,\r\n                                    green = 169,\r\n                                    blue = 244,\r\n                                    alpha = 255\r\n                                )\r\n                                circleRadius = 40.0\r\n                                circleColor =\r\n                                    Color(\r\n                                        red = 3,\r\n                                        green = 169,\r\n                                        blue = 244,\r\n                                        alpha = 255\r\n                                    ).copy(alpha = 0.4f)\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n//                        LocationDisplay(userLocation)\r\n//                        Button(onClick = { checkLocationPermission() }) {\r\n//                            Text(\"Update Location\")\r\n//                        }\r\n        }\r\n    }\r\n\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        stopLocationUpdates()\r\n    }\r\n\r\n    private fun stopLocationUpdates() {\r\n        fusedLocationClient.removeLocationUpdates(locationCallback)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/code_crusaders/floodsafe/MainActivity.kt b/app/src/main/java/com/code_crusaders/floodsafe/MainActivity.kt
--- a/app/src/main/java/com/code_crusaders/floodsafe/MainActivity.kt	
+++ b/app/src/main/java/com/code_crusaders/floodsafe/MainActivity.kt	
@@ -6,6 +6,7 @@
 import android.location.Location
 import android.os.Bundle
 import android.os.Looper
+import android.util.Log
 import android.widget.Toast
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
@@ -96,13 +97,26 @@
                 }
             }
         }
-
-
-        enableEdgeToEdge()
-        setContent {
-        }
-
         checkLocationPermission()
+
+
+    }
+
+    private fun sampleDataPrint() {
+
+        val localDataStore = DataHandler().getLocalSyntheticData()
+
+        // Access data from the LocalDataStore object
+        val floodedAreas = localDataStore.floodedAreas
+        val disasterManagementServices = localDataStore.disasterManagementServices
+        val emergencySupplyDrops = localDataStore.emergencySupplyDrops
+
+        floodedAreas.forEach { floodedArea ->
+            Log.d(
+                "MainActivity",
+                "Flooded Area: ${floodedArea.location}, Depth: ${floodedArea.depth}, Radius: ${floodedArea.radius}"
+            )
+        }
     }
 
     private fun checkLocationPermission() {
@@ -163,6 +177,7 @@
     }
 
     private fun updateLocationUI(location: Location) {
+        enableEdgeToEdge()
         setContent {
             FloodsafeTheme {
                 val mapViewportState = rememberMapViewportState {
@@ -280,7 +295,6 @@
         }
     }
 
-
     override fun onPause() {
         super.onPause()
         stopLocationUpdates()
Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\r\nagp = \"8.5.1\"\r\nkotlin = \"1.9.0\"\r\ncoreKtx = \"1.13.1\"\r\njunit = \"4.13.2\"\r\njunitVersion = \"1.2.1\"\r\nespressoCore = \"3.6.1\"\r\nlifecycleRuntimeKtx = \"2.8.4\"\r\nactivityCompose = \"1.9.1\"\r\ncomposeBom = \"2024.04.01\"\r\n\r\n[libraries]\r\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\r\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\r\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\r\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\r\nandroidx-lifecycle-runtime-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-runtime-ktx\", version.ref = \"lifecycleRuntimeKtx\" }\r\nandroidx-activity-compose = { group = \"androidx.activity\", name = \"activity-compose\", version.ref = \"activityCompose\" }\r\nandroidx-compose-bom = { group = \"androidx.compose\", name = \"compose-bom\", version.ref = \"composeBom\" }\r\nandroidx-ui = { group = \"androidx.compose.ui\", name = \"ui\" }\r\nandroidx-ui-graphics = { group = \"androidx.compose.ui\", name = \"ui-graphics\" }\r\nandroidx-ui-tooling = { group = \"androidx.compose.ui\", name = \"ui-tooling\" }\r\nandroidx-ui-tooling-preview = { group = \"androidx.compose.ui\", name = \"ui-tooling-preview\" }\r\nandroidx-ui-test-manifest = { group = \"androidx.compose.ui\", name = \"ui-test-manifest\" }\r\nandroidx-ui-test-junit4 = { group = \"androidx.compose.ui\", name = \"ui-test-junit4\" }\r\nandroidx-material3 = { group = \"androidx.compose.material3\", name = \"material3\" }\r\nfirebase-firestore = { group = \"com.google.firebase\", name = \"firebase-firestore\", version.ref = \"firebaseFirestore\" }\r\nandroidx-material-icons-extended = {  group = \"androidx.compose.material\", name = \"material-icons-extended\"}\r\n\r\n[plugins]\r\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\r\njetbrains-kotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\r\ngoogle-gms-google-services = { id = \"com.google.gms.google-services\", version.ref = \"googleGmsGoogleServices\" }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
--- a/gradle/libs.versions.toml	
+++ b/gradle/libs.versions.toml	
@@ -8,6 +8,8 @@
 lifecycleRuntimeKtx = "2.8.4"
 activityCompose = "1.9.1"
 composeBom = "2024.04.01"
+googleGmsGoogleServices = "4.4.2"
+firebaseFirestore = "25.1.0"
 
 [libraries]
 androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
